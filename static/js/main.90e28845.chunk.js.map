{"version":3,"sources":["reducers/survey.js","reducers/index.js","store/index.js","components/Loading/index.js","components/SurveyList/index.js","config/environment.js","utils/axios.js","services/types/index.js","components/ChoiceQuestions/index.js","components/ScrollButton/index.js","components/SurveyQuestion/index.js","subapp/reducers/survey.js","subapp/reducers/index.js","subapp/components/Loading/index.js","subapp/components/SurveyList/index.js","subapp/config/environment.js","subapp/utils/axios.js","subapp/services/types/index.js","subapp/components/ChoiceQuestions/index.js","subapp/components/ScrollButton/index.js","subapp/components/SurveyQuestion/index.js","subapp/containers/Survey/index.js","subapp/services/survey.js","subapp/routes/router.js","subapp/App.js","subapp/SubApp.js","containers/Survey/index.js","services/survey.js","routes/router.js","App.js","registerServiceWorker.js","index.js"],"names":["initialState","surveyList","surveys","loading","error","success","currentSurvey","rootReducer","combineReducers","routing","routerReducer","survey","state","arguments","length","undefined","action","type","Object","objectSpread","payload","newState","assign","data","filter","id","surveyId","questions","history","createBrowserHistory","historyMiddleware","routerMiddleware","middlewares","applyMiddleware","thunk","store","createStore","connectRouter","composeWithDevTools","Loading","react","className","data-testid","SurveyList","_ref","map","index","key","aria-hidden","title","tagline","Link","to","concat","BASE_URL","instance","axios","create","baseURL","headers","Content-Type","timeout","interceptors","response","use","Promise","reject","status","SURVEYS","CancelToken","SINGLE_SURVEY","SUBMIT_SURVEY","SURVEYS_ERROR","SURVEY_ERROR","SUBMIT_ERROR","ChoiceQuestions","_this$props$question","this","props","question","options","option","formik_esm","name","component","value","React","ScrollButton","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","intervalId","window","pageYOffset","clearInterval","scroll","scrollStepInPx","setInterval","scrollStep","bind","delayInMs","setState","_this2","onClick","scrollToTop","SurveyQuestion","_this$props","isLoading","handleSubmit","isSuccess","renderLoading","notify","show","background","text","setTimeout","location","href","onSubmit","components_ChoiceQuestions","ScrollButton_ScrollButton","withFormik","mapPropsToValues","values","keys","subapp_components_ChoiceQuestions","components_ScrollButton_ScrollButton","Survey","context","fetchSurveys","then","fetchSurveyById","submitSurvey","nextProps","_this$state","console","log","react_default","a","createElement","notify_default","subapp_components_Loading","subapp_components_SurveyQuestion","handleError","subapp_components_SurveyList","Component","connect","dispatch","request","method","url","types","catch","surveyResponse","SurveyAction","submitResult","Router","BrowserRouter","basename","Switch","Route","exact","path","App","router","SubApp","reducer","es","src_subapp_App","match","params","paramId","components_Loading","components_SurveyQuestion","components_SurveyList","subapp_SubApp","routes_router","isLocalhost","Boolean","hostname","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","ReactDOM","render","lib","src_App_0","document","getElementById","URL","process","origin","addEventListener","fetch","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.90e28845.chunk.js","sourcesContent":["const initialState = {\n  surveyList: {\n    surveys: [],\n    loading: false,\n    error: null,\n    success: false,\n    currentSurvey: null,\n  },\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_SURVEYS':\n      return {\n        ...state,\n        surveyList: {\n          surveys: action.payload.surveys,\n          error: null,\n          loading: false,\n          currentSurvey: null,\n        },\n      };\n    case 'SINGLE_SURVEY':\n      let newState = Object.assign({}, state);\n      let surveys = newState.surveyList.surveys;\n      let payload = action.payload;\n      newState.surveyList.currentSurvey = payload.data;\n      /** filter from our current survey and push the value */\n      surveys.filter(survey => {\n        if (survey.id === payload.surveyId) {\n          survey.questions = payload.data.questions;\n        }\n        return survey;\n      });\n      return {\n        ...newState,\n      };\n    case 'SUBMIT_SURVEY':\n      return {\n        ...state,\n        success: true,\n      };\n    case 'SURVEYS_ERROR':\n      return {\n        ...state,\n        error: true,\n      };\n    case 'SURVEY_ERROR':\n      return {\n        ...state,\n        error: true,\n      };\n    case 'SUBMIT_ERROR':\n      return {\n        ...state,\n        error: true,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { routerReducer } from 'react-router-redux';\n/* import from our reducers */\nimport survey from './survey';\n/* \n* Root Reducers \n*/\n\nconst rootReducer = combineReducers({\n  routing: routerReducer,\n  survey,\n});\n\nexport default rootReducer;\n","/**\n * Author: Suman Kunwar <sumn2u@gmail.com>\n * Redux store and middlewares\n */\nimport { createStore, applyMiddleware } from 'redux';\nimport { connectRouter, routerMiddleware } from 'connected-react-router';\nimport { createBrowserHistory } from 'history';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers';\n\n/**\n * History of choice\n * Browser history is used in this case\n */\nconst history = createBrowserHistory();\n\n/**\n * Middlewares for redux\n * For intercepting and dispatching navigation actions\n */\nconst historyMiddleware = routerMiddleware(history);\nconst middlewares = applyMiddleware(thunk, historyMiddleware);\nconst store = createStore(\n  connectRouter(history)(rootReducer),\n  composeWithDevTools(middlewares),\n);\n\nexport { history };\nexport default store;\n","import * as React from 'react';\n\nconst Loading = () => {\n  return (\n    <div className=\"loading\">\n      <h1 className=\"text-center\" data-testid=\"loading-text\">\n        Loading...\n      </h1>\n    </div>\n  );\n};\n\nexport default Loading;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst SurveyList = ({ surveys }) => {\n  return surveys ? (\n    surveys.map((survey, index) => (\n      <div key={index} className=\"col-lg-4 col-md-4 col-sm-4 col-xs-12\">\n        <div className=\"box-part text-center\">\n          <i\n            className=\"glyphicon glyphicon-list-alt gi-3x\"\n            aria-hidden=\"true\"\n          />\n          <div className=\"title\">\n            <h3>{survey.title} </h3>\n          </div>\n          <div className=\"text\">{survey.tagline} </div>\n          <Link to={`/surveys/${survey.id}`}>Take Survey</Link>\n        </div>\n      </div>\n    ))\n  ) : (\n    <span className=\"text-center\"> no surveys </span>\n  );\n};\n\nexport default SurveyList;\n","const BASE_URL = 'https://private-5fb3f-surveysmock.apiary-mock.com/api'; // API URL\n\nexport { BASE_URL };\n","import axios from 'axios';\n// import store from '../store'\nimport { BASE_URL } from '../config/environment';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  headers: { 'Content-Type': 'application/json' },\n  timeout: 0,\n});\n\ninstance.interceptors.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    // Do something with response error\n    if (typeof error === 'undefined') {\n      // request cancelled\n      // when backend server is not available at all\n      // toast.info(\"We cannot seem to reach our servers. Please check your internet connection and try again\", {autoClose: false});\n      return Promise.reject(error);\n    } else if (typeof error.response === 'undefined') {\n      // when request is timeout\n      // toast.info(\"We cannot seem to reach our servers. Please check your internet connection and try again\", {autoClose: false});\n      return Promise.reject(error.response);\n    } else if (error.response.status === 401) {\n      // unathorized access\n      return Promise.reject(error.response);\n    } else if (error.response.status === 403) {\n      // Forbidden\n      // toast.info(\"You are not authorized to perform that action\", {autoClose: 5000});\n      return Promise.reject(error.response);\n    } else if (error.response.status === 500) {\n      // toast.info(\"Our systems are currently facing a problem. Please check back later\", {autoClose: false});\n      return Promise.reject(error.response);\n    } else {\n      // we don't know what's going on\n      return Promise.reject(error.response);\n    }\n  },\n);\n\nexport const rootURL = BASE_URL;\nexport default instance;\n\nexport const CancelToken = axios.CancelToken;\n","export const SURVEYS = 'FETCH_SURVEYS';\nexport const SINGLE_SURVEY = 'SINGLE_SURVEY';\nexport const SUBMIT_SURVEY = 'SUBMIT_SURVEY';\nexport const SURVEYS_ERROR = 'SURVEYS_ERROR';\nexport const SURVEY_ERROR = 'SURVEY_ERROR';\nexport const SUBMIT_ERROR = 'SUBMIT_ERROR';\n","import * as React from 'react';\nimport { Field } from 'formik';\n\nclass ChoiceQuestions extends React.Component {\n  render() {\n    const { title, options, id } = this.props.question;\n    return (\n      <div>\n        <h3 className=\"question-title\">{title}</h3>\n        <div>\n          {options.map((option, index) => {\n            return (\n              <div className=\"radio\" key={index}>\n                <label>\n                  <Field\n                    type=\"radio\"\n                    name={`${id}`}\n                    component=\"input\"\n                    value={option}\n                  />\n                  {option}\n                </label>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ChoiceQuestions;\n","import * as React from 'react';\nexport default class ScrollButton extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      intervalId: 0,\n    };\n  }\n\n  scrollStep() {\n    if (window.pageYOffset === 0) {\n      clearInterval(this.state.intervalId);\n    }\n    window.scroll(0, window.pageYOffset - this.props.scrollStepInPx);\n  }\n\n  scrollToTop() {\n    let intervalId = setInterval(\n      this.scrollStep.bind(this),\n      this.props.delayInMs,\n    );\n    this.setState({ intervalId: intervalId });\n  }\n\n  render() {\n    return (\n      <button\n        title=\"Back to top\"\n        className=\"scroll\"\n        onClick={() => {\n          this.scrollToTop();\n        }}\n      >\n        <span className=\"arrow-up glyphicon glyphicon-chevron-up\" />\n      </button>\n    );\n  }\n}\n","import * as React from 'react';\nimport ChoiceQuestions from '../ChoiceQuestions';\nimport ScrollButton from '../ScrollButton';\nimport { withFormik } from 'formik';\nimport { notify } from 'react-notify-toast';\nimport { Link } from 'react-router-dom';\nclass SurveyQuestion extends React.Component {\n  renderError() {\n    return <div>Error!</div>;\n  }\n\n  renderLoading() {\n    return <div>Loading...</div>;\n  }\n\n  renderSuccess() {\n    return (\n      <div>\n        <h1>Submit Success!</h1>\n      </div>\n    );\n  }\n\n  render() {\n    let { survey, isLoading, error, handleSubmit, isSuccess } = this.props;\n    let { title, tagline, questions } = survey;\n    if (isLoading) {\n      return this.renderLoading();\n    }\n\n    if (error) {\n      let myColor = { background: '#e3c23f', text: '#FFFFFF' };\n      notify.show(\n        'All questions should be answered ! ',\n        'custom',\n        2000,\n        myColor,\n      );\n    }\n\n    if (!survey) {\n      return <div />;\n    }\n\n    if (isSuccess) {\n      let myColor = { background: '#0E1717', text: '#FFFFFF' };\n      notify.show('Thanks for answering the survey! ', 'custom', 2000, myColor);\n      const  baseName =  process.env.REACT_APP_ENV === 'github' ? '/dalia-workshop' : '/';\n      setTimeout(() => { window.location.href=baseName} , 2100);  //eslint-disable-next-line\n    }\n\n    return (\n      <div className=\"Survey\">\n        <br />\n        <form onSubmit={handleSubmit}>\n          <header>\n            <div className=\"inline-block\">\n              {' '}\n              <Link to={`/surveys`}> Home</Link> | Survey Question{' '}\n            </div>\n            <h3> {title} </h3>\n            <p>{tagline}</p>\n          </header>\n          <ul className=\"list-unstyled\">\n            {questions.map(question => {\n              return (\n                <li key={question.id}>\n                  <div className=\"question clearfix\">\n                    <ChoiceQuestions question={question} />\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <div className=\"form-group\">\n            <input type=\"submit\" className=\"btn btn-primary\" />\n          </div>\n        </form>\n        <ScrollButton scrollStepInPx=\"50\" delayInMs=\"16.66\" />\n      </div>\n    );\n  }\n}\n\nexport default withFormik({\n  mapPropsToValues: () => {},\n  handleSubmit: (values, { props }) => {\n    if (Object.keys(values).length === props.survey.questions.length) {\n      // debugger;\n      props.handleSubmit(props.survey.id, values);\n    } else {\n     // props.handleError(); /** call the error */\n    }\n    // props.handleSubmit(props.survey.id, values)\n  },\n})(SurveyQuestion);\n","const initialState = {\n  surveyList: {\n    surveys: [],\n    loading: false,\n    error: null,\n    success: false,\n    currentSurvey: null,\n  },\n};\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case 'FETCH_SURVEYS':\n      return {\n        ...state,\n        surveyList: {\n          surveys: action.payload.surveys,\n          error: null,\n          loading: false,\n          currentSurvey: null,\n        },\n      };\n    case 'SINGLE_SURVEY':\n      let newState = Object.assign({}, state);\n      let surveys = newState.surveyList.surveys;\n      let payload = action.payload;\n      newState.surveyList.currentSurvey = payload.data;\n      /** filter from our current survey and push the value */\n      surveys.filter(survey => {\n        if (survey.id === payload.surveyId) {\n          survey.questions = payload.data.questions;\n        }\n        return survey;\n      });\n      return {\n        ...newState,\n      };\n    case 'SUBMIT_SURVEY':\n      return {\n        ...state,\n        success: true,\n      };\n    case 'SURVEYS_ERROR':\n      return {\n        ...state,\n        error: true,\n      };\n    case 'SURVEY_ERROR':\n      return {\n        ...state,\n        error: true,\n      };\n    case 'SUBMIT_ERROR':\n      return {\n        ...state,\n        error: true,\n      };\n    default:\n      return state;\n  }\n};\n","import { combineReducers } from 'redux';\nimport { routerReducer } from 'react-router-redux';\n/* import from our reducers */\nimport survey from './survey';\n/* \n* Root Reducers \n*/\n\nconst rootReducer = combineReducers({\n  routing: routerReducer,\n  survey,\n});\n\nexport default rootReducer;\n","import * as React from 'react';\n\nconst Loading = () => {\n  return (\n    <div className=\"loading\">\n      <h1 className=\"text-center\" data-testid=\"loading-text\">\n        Loading...\n      </h1>\n    </div>\n  );\n};\n\nexport default Loading;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst SurveyList = ({ surveys }) => {\n  return surveys ? (\n    surveys.map((survey, index) => (\n      <div key={index} className=\"col-lg-4 col-md-4 col-sm-4 col-xs-12\">\n        <div className=\"box-part text-center\">\n          <i\n            className=\"glyphicon glyphicon-list-alt gi-3x\"\n            aria-hidden=\"true\"\n          />\n          <div className=\"title\">\n            <h3>{survey.title} </h3>\n          </div>\n          <div className=\"text\">{survey.tagline} </div>\n          <Link to={`/surveys/${survey.id}`}>Take Survey</Link>\n        </div>\n      </div>\n    ))\n  ) : (\n    <span className=\"text-center\"> no surveys </span>\n  );\n};\n\nexport default SurveyList;\n","const BASE_URL = 'https://private-5fb3f-surveysmock.apiary-mock.com/api'; // API URL\n\nexport { BASE_URL };\n","import axios from 'axios';\n// import store from '../store'\nimport { BASE_URL } from '../config/environment';\n\nconst instance = axios.create({\n  baseURL: BASE_URL,\n  headers: { 'Content-Type': 'application/json' },\n  timeout: 0,\n});\n\ninstance.interceptors.response.use(\n  response => {\n    return response;\n  },\n  error => {\n    // Do something with response error\n    if (typeof error === 'undefined') {\n      // request cancelled\n      // when backend server is not available at all\n      // toast.info(\"We cannot seem to reach our servers. Please check your internet connection and try again\", {autoClose: false});\n      return Promise.reject(error);\n    } else if (typeof error.response === 'undefined') {\n      // when request is timeout\n      // toast.info(\"We cannot seem to reach our servers. Please check your internet connection and try again\", {autoClose: false});\n      return Promise.reject(error.response);\n    } else if (error.response.status === 401) {\n      // unathorized access\n      return Promise.reject(error.response);\n    } else if (error.response.status === 403) {\n      // Forbidden\n      // toast.info(\"You are not authorized to perform that action\", {autoClose: 5000});\n      return Promise.reject(error.response);\n    } else if (error.response.status === 500) {\n      // toast.info(\"Our systems are currently facing a problem. Please check back later\", {autoClose: false});\n      return Promise.reject(error.response);\n    } else {\n      // we don't know what's going on\n      return Promise.reject(error.response);\n    }\n  },\n);\n\nexport const rootURL = BASE_URL;\nexport default instance;\n\nexport const CancelToken = axios.CancelToken;\n","export const SURVEYS = 'FETCH_SURVEYS';\nexport const SINGLE_SURVEY = 'SINGLE_SURVEY';\nexport const SUBMIT_SURVEY = 'SUBMIT_SURVEY';\nexport const SURVEYS_ERROR = 'SURVEYS_ERROR';\nexport const SURVEY_ERROR = 'SURVEY_ERROR';\nexport const SUBMIT_ERROR = 'SUBMIT_ERROR';\n","import * as React from 'react';\nimport { Field } from 'formik';\n\nclass ChoiceQuestions extends React.Component {\n  render() {\n    const { title, options, id } = this.props.question;\n    return (\n      <div>\n        <h3 className=\"question-title\">{title}</h3>\n        <div>\n          {options.map((option, index) => {\n            return (\n              <div className=\"radio\" key={index}>\n                <label>\n                  <Field\n                    type=\"radio\"\n                    name={`${id}`}\n                    component=\"input\"\n                    value={option}\n                  />\n                  {option}\n                </label>\n              </div>\n            );\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default ChoiceQuestions;\n","import * as React from 'react';\nexport default class ScrollButton extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      intervalId: 0,\n    };\n  }\n\n  scrollStep() {\n    if (window.pageYOffset === 0) {\n      clearInterval(this.state.intervalId);\n    }\n    window.scroll(0, window.pageYOffset - this.props.scrollStepInPx);\n  }\n\n  scrollToTop() {\n    let intervalId = setInterval(\n      this.scrollStep.bind(this),\n      this.props.delayInMs,\n    );\n    this.setState({ intervalId: intervalId });\n  }\n\n  render() {\n    return (\n      <button\n        title=\"Back to top\"\n        className=\"scroll\"\n        onClick={() => {\n          this.scrollToTop();\n        }}\n      >\n        <span className=\"arrow-up glyphicon glyphicon-chevron-up\" />\n      </button>\n    );\n  }\n}\n","import * as React from 'react';\nimport ChoiceQuestions from '../ChoiceQuestions';\nimport ScrollButton from '../ScrollButton';\nimport { withFormik } from 'formik';\nimport { notify } from 'react-notify-toast';\nimport { Link } from 'react-router-dom';\nclass SurveyQuestion extends React.Component {\n  renderError() {\n    return <div>Error!</div>;\n  }\n\n  renderLoading() {\n    return <div>Loading...</div>;\n  }\n\n  renderSuccess() {\n    return (\n      <div>\n        <h1>Submit Success!</h1>\n      </div>\n    );\n  }\n\n  render() {\n    let { survey, isLoading, error, handleSubmit, isSuccess } = this.props;\n    let { title, tagline, questions } = survey;\n    if (isLoading) {\n      return this.renderLoading();\n    }\n\n    if (error) {\n      let myColor = { background: '#e3c23f', text: '#FFFFFF' };\n      notify.show(\n        'All questions should be answered ! ',\n        'custom',\n        2000,\n        myColor,\n      );\n    }\n\n    if (!survey) {\n      return <div />;\n    }\n\n    if (isSuccess) {\n      let myColor = { background: '#0E1717', text: '#FFFFFF' };\n      notify.show('Thanks for answering the survey! ', 'custom', 2000, myColor);\n      const  baseName =  process.env.REACT_APP_ENV === 'github' ? '/dalia-workshop' : '/';\n      setTimeout(() => { window.location.href=baseName} , 2100);  //eslint-disable-next-line\n    }\n\n    return (\n      <div className=\"Survey\">\n        <br />\n        <form onSubmit={handleSubmit}>\n          <header>\n            <div className=\"inline-block\">\n              {' '}\n              <Link to={`/surveys`}> Home</Link> | Survey Question{' '}\n            </div>\n            <h3> {title} </h3>\n            <p>{tagline}</p>\n          </header>\n          <ul className=\"list-unstyled\">\n            {questions.map(question => {\n              return (\n                <li key={question.id}>\n                  <div className=\"question clearfix\">\n                    <ChoiceQuestions question={question} />\n                  </div>\n                </li>\n              );\n            })}\n          </ul>\n          <div className=\"form-group\">\n            <input type=\"submit\" className=\"btn btn-primary\" />\n          </div>\n        </form>\n        <ScrollButton scrollStepInPx=\"50\" delayInMs=\"16.66\" />\n      </div>\n    );\n  }\n}\n\nexport default withFormik({\n  mapPropsToValues: () => {},\n  handleSubmit: (values, { props }) => {\n    if (Object.keys(values).length === props.survey.questions.length) {\n      // debugger;\n      props.handleSubmit(props.survey.id, values);\n    } else {\n     // props.handleError(); /** call the error */\n    }\n    // props.handleSubmit(props.survey.id, values)\n  },\n})(SurveyQuestion);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n/* import components */\nimport Loading from '../../components/Loading';\nimport SurveyList from '../../components/SurveyList';\nimport * as SurveyAction from '../../services/survey';\nimport SurveyQuestion from '../../components/SurveyQuestion';\nimport Notifications from 'react-notify-toast';\n\nclass Survey extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      loading: true,\n      surveys: [],\n      surveyId: '',\n      currentSurvey: null,\n      error: '',\n    };\n  }\n\n  componentDidMount() {\n   \n    let surveyId = '001'\n    this.setState({ surveyId }); //set the current survey\n    if (surveyId) {\n      this.props.fetchSurveys().then(() => {\n        this.props.fetchSurveyById(surveyId);\n      });\n    } else {\n      this.props.fetchSurveys();\n    }\n  } //end component did mount\n  submitSurvey(surveyId, values) {\n    this.props.submitSurvey(surveyId, values);\n  }\n  handleError() {\n    this.setState({ error: 'all questions are necessary' });\n  }\n  componentWillReceiveProps(nextProps) {\n    let paramId = '001';\n    let { surveyId } = this.state;\n    let { currentSurvey } = this.props;\n   \n    if (!paramId) this.setState({ surveyId: null }); //\n\n    /** check if weather the last survey is equal to current survey if not set the current value */\n    if (\n      (paramId && surveyId && paramId !== surveyId) ||\n      (paramId && paramId !== surveyId)\n    ) {\n      this.setState({\n        surveyId: paramId,\n        error: '',\n      });\n      // check if the question is in the store or not if present don't load\n      if (!currentSurvey) {\n        this.props.fetchSurveyById(paramId);\n      } else {\n        // load the new data into the store\n        if (currentSurvey.id !== paramId) {\n          this.props.fetchSurveyById(paramId);\n        }\n      }\n    }\n    this.setState({ loading: nextProps.loading });\n  }\n\n  render() {\n    let { surveys, isSuccess, currentSurvey } = this.props;\n    let { loading, surveyId, error } = this.state;\n    console.log(currentSurvey, surveyId)\n    return (\n      <div className=\"box\">\n        <div className=\"container\">\n          <Notifications />\n          <br/>  <br/>  <br/>\n          <h3 className=\"text-center\">  </h3>\n          <div className=\"row\">\n            {/* Survey List */}\n            {loading ? (\n              <Loading />\n            ) : surveyId && currentSurvey ? (\n              <SurveyQuestion\n                survey={currentSurvey}\n                isLoading={loading}\n                error={error}\n                handleError={this.handleError.bind(this)}\n                handleSubmit={this.submitSurvey.bind(this)}\n                isSuccess={isSuccess}\n              />\n            ) : (\n              <SurveyList surveys={surveys} />\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n  /*end class Start*/\n}\n\nconst mapStateToProps = state => {\n  return {\n    surveys: state.survey.surveyList.surveys,\n    loading: state.survey.surveyList.loading,\n    currentSurvey: state.survey.surveyList.currentSurvey,\n    isSuccess: state.survey.success,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchSurveys: () => dispatch(SurveyAction.getSurveys()),\n  fetchSurveyById: surveyId => dispatch(SurveyAction.getSurveyById(surveyId)),\n  submitSurvey: (surveyId, submitResult) =>\n    dispatch(SurveyAction.submitSurvey(surveyId, submitResult)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Survey);\n","import axios from '../utils/axios';\nimport { BASE_URL } from '../config/environment';\nimport * as types from './types';\n/* Get the list of surveys */\nexport function getSurveys() {\n  return dispatch => {\n    return axios\n      .request({\n        method: 'GET',\n        url: `${BASE_URL}/surveys`,\n      })\n      .then(response => {\n        dispatch({\n          type: types.SURVEYS,\n          payload: response.data,\n        });\n      })\n      .catch(error => {\n        dispatch({\n          type: types.SURVEYS_ERROR,\n          payload: error,\n        });\n      });\n  };\n}\n\nexport function getSurveyById(surveyId) {\n  return dispatch => {\n    return axios\n      .request({\n        method: 'GET',\n        url: `${BASE_URL}/surveys/${surveyId}`,\n      })\n      .then(response => {\n        let surveyResponse = { data: response.data.survey, surveyId: surveyId };\n        dispatch({\n          type: types.SINGLE_SURVEY,\n          payload: surveyResponse,\n        });\n      })\n      .catch(error => {\n        dispatch({\n          type: types.SURVEY_ERROR,\n          payload: error,\n        });\n      });\n  };\n}\n\nexport function submitSurvey(surveyId, submitResult) {\n  return dispatch => {\n    return axios\n      .request({\n        method: 'POST',\n        url: `${BASE_URL}/surveys/${surveyId}/completions`,\n        data: submitResult,\n      })\n      .then(response => {\n        dispatch({\n          type: types.SUBMIT_SURVEY,\n          payload: response.data,\n        });\n      })\n      .catch(error => {\n        dispatch({\n          type: types.SUBMIT_ERROR,\n          payload: error,\n        });\n      });\n  };\n}\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Survey from '.././containers/Survey';\nconst  baseName =  process.env.REACT_APP_ENV === 'github' ? '/dalia-workshop' : '/';\nconst Router = () => (\n  <BrowserRouter basename={baseName}>\n    <Switch>\n      <Route exact={true} path=\"/\" component={Survey} />\n      <Route exact={true} path=\"/surveys\" component={Survey} />\n      <Route exact={true} path=\"/surveys/:id\" component={Survey} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router","import React, { Component } from 'react';\nimport './App.css';\nimport Router from './routes/router';\n\nclass App extends Component {\n  render() {\n    return <Router {...this.props} />;\n  }\n}\n\nexport default App;\n","import React, { Component } from 'react'\nimport { Provider } from 'react-redux'\nimport { createStore, applyMiddleware } from 'redux'\n// import {  applyMiddleware } from 'redux';\nimport reducer  from './reducers'\nimport App from './App'\nimport thunk from 'redux-thunk';\n\n\nclass SubApp extends Component {\n  constructor(props) {\n    super(props)\n    this.store = createStore(reducer,\n      applyMiddleware(thunk))\n  }\n\n  render() {\n    return (\n      <Provider store={this.store}>\n        <App />\n      </Provider>\n    )\n  }\n}\n\nexport default SubApp;","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\n/* import components */\nimport Loading from '../../components/Loading';\nimport SurveyList from '../../components/SurveyList';\nimport * as SurveyAction from '../../services/survey';\nimport SurveyQuestion from '../../components/SurveyQuestion';\nimport Notifications from 'react-notify-toast';\nimport  SubApp from '../../subapp/SubApp'\n\nclass Survey extends Component {\n  constructor(props, context) {\n    super(props, context);\n    this.state = {\n      loading: true,\n      surveys: [],\n      surveyId: '',\n      currentSurvey: null,\n      error: '',\n    };\n  }\n\n  componentDidMount() {\n    let surveyId = this.props.match.params.id;\n    this.setState({ surveyId }); //set the current survey\n    if (surveyId) {\n      this.props.fetchSurveys().then(() => {\n        this.props.fetchSurveyById(surveyId);\n      });\n    } else {\n      this.props.fetchSurveys();\n    }\n  } //end component did mount\n  submitSurvey(surveyId, values) {\n    this.props.submitSurvey(surveyId, values);\n  }\n  handleError() {\n    this.setState({ error: 'all questions are necessary' });\n  }\n  componentWillReceiveProps(nextProps) {\n    let paramId = nextProps.match.params.id;\n    let { surveyId } = this.state;\n    let { currentSurvey } = this.props;\n    if (!paramId) this.setState({ surveyId: null }); //\n\n    /** check if weather the last survey is equal to current survey if not set the current value */\n    if (\n      (paramId && surveyId && paramId !== surveyId) ||\n      (paramId && paramId !== surveyId)\n    ) {\n      this.setState({\n        surveyId: paramId,\n        error: '',\n      });\n      // check if the question is in the store or not if present don't load\n      if (!currentSurvey) {\n        this.props.fetchSurveyById(paramId);\n      } else {\n        // load the new data into the store\n        if (currentSurvey.id !== paramId) {\n          this.props.fetchSurveyById(paramId);\n        }\n      }\n    }\n    this.setState({ loading: nextProps.loading });\n  }\n\n  render() {\n    let { surveys, isSuccess, currentSurvey } = this.props;\n    let { loading, surveyId, error } = this.state;\n    return (\n      <div className=\"box\">\n        <div className=\"container\">\n          <Notifications />\n          <h3 className=\"text-center\"> Dalia's Survey </h3>\n          <div className=\"row\">\n            {/* Survey List */}\n            {loading ? (\n              <Loading />\n            ) : surveyId && currentSurvey ? (\n            \n              \n              <SurveyQuestion\n                survey={currentSurvey}\n                isLoading={loading}\n                error={error}\n                handleError={this.handleError.bind(this)}\n                handleSubmit={this.submitSurvey.bind(this)}\n                isSuccess={isSuccess}\n              />\n              \n            \n            ) : (\n            <div className=\"row\">\n              <SurveyList surveys={surveys} />\n              <SubApp/>\n            </div>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n  /*end class Start*/\n}\n\nconst mapStateToProps = state => {\n  return {\n    surveys: state.survey.surveyList.surveys,\n    loading: state.survey.surveyList.loading,\n    currentSurvey: state.survey.surveyList.currentSurvey,\n    isSuccess: state.survey.success,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  fetchSurveys: () => dispatch(SurveyAction.getSurveys()),\n  fetchSurveyById: surveyId => dispatch(SurveyAction.getSurveyById(surveyId)),\n  submitSurvey: (surveyId, submitResult) =>\n    dispatch(SurveyAction.submitSurvey(surveyId, submitResult)),\n});\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(Survey);\n","import axios from '../utils/axios';\nimport { BASE_URL } from '../config/environment';\nimport * as types from './types';\n/* Get the list of surveys */\nexport function getSurveys() {\n  return dispatch => {\n    return axios\n      .request({\n        method: 'GET',\n        url: `${BASE_URL}/surveys`,\n      })\n      .then(response => {\n        dispatch({\n          type: types.SURVEYS,\n          payload: response.data,\n        });\n      })\n      .catch(error => {\n        dispatch({\n          type: types.SURVEYS_ERROR,\n          payload: error,\n        });\n      });\n  };\n}\n\nexport function getSurveyById(surveyId) {\n  return dispatch => {\n    return axios\n      .request({\n        method: 'GET',\n        url: `${BASE_URL}/surveys/${surveyId}`,\n      })\n      .then(response => {\n        let surveyResponse = { data: response.data.survey, surveyId: surveyId };\n        dispatch({\n          type: types.SINGLE_SURVEY,\n          payload: surveyResponse,\n        });\n      })\n      .catch(error => {\n        dispatch({\n          type: types.SURVEY_ERROR,\n          payload: error,\n        });\n      });\n  };\n}\n\nexport function submitSurvey(surveyId, submitResult) {\n  return dispatch => {\n    return axios\n      .request({\n        method: 'POST',\n        url: `${BASE_URL}/surveys/${surveyId}/completions`,\n        data: submitResult,\n      })\n      .then(response => {\n        dispatch({\n          type: types.SUBMIT_SURVEY,\n          payload: response.data,\n        });\n      })\n      .catch(error => {\n        dispatch({\n          type: types.SUBMIT_ERROR,\n          payload: error,\n        });\n      });\n  };\n}\n","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport Survey from '.././containers/Survey';\nconst  baseName =  process.env.REACT_APP_ENV === 'github' ? '/dalia-workshop' : '/';\nconst Router = () => (\n  <BrowserRouter basename={baseName}>\n    <Switch>\n      <Route exact={true} path=\"/\" component={Survey} />\n      <Route exact={true} path=\"/surveys\" component={Survey} />\n      <Route exact={true} path=\"/surveys/:id\" component={Survey} />\n    </Switch>\n  </BrowserRouter>\n);\n\nexport default Router","import React, { Component } from 'react';\nimport './App.css';\nimport Router from './routes/router';\n\nclass App extends Component {\n  render() {\n    return <Router {...this.props} />;\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { ConnectedRouter } from 'connected-react-router';\nimport store, { history } from './store';\nimport 'bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import 'bootstrap/dist/css/bootstrap-theme.css';\n// import 'bootstrap/dist/css/bootstrap-min.css';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(\n  <Provider store={store}>\n    <ConnectedRouter history={history}>\n      <App />\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root'),\n);\nregisterServiceWorker();\n"],"sourceRoot":""}